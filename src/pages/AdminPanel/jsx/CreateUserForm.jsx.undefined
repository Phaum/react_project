import React, { useState, useEffect } from "react";

const CreateUserForm = ({ onUserCreated }) => {
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");
    const [role, setRole] = useState("user"); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "user"
    const [group, setGroup] = useState(""); // –í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞
    const [groups, setGroups] = useState([]); // –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    // const [newGroup, setNewGroup] = useState(""); // –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞

    // üìå –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        const fetchGroups = async () => {
            try {
                const token = localStorage.getItem("token");
                const response = await fetch("http://localhost:5000/admin-tools/groups", {
                    headers: { Authorization: `Bearer ${token}` },
                });

                if (!response.ok) {
                    throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø");
                }

                const data = await response.json();
                setGroups(data);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:", error);
            }
        };

        fetchGroups();
    }, []);

    // üìå –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleCreateUser = async (e) => {
        e.preventDefault();

        if (password.length < 6) {
            alert("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!");
            return;
        }

        if (!group) {
            alert("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É!");
            return;
        }

        try {
            const token = localStorage.getItem("token");
            const response = await fetch("http://localhost:5000/admin-tools/create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({ username, password, role, group }),
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(errorText);
            }

            const data = await response.json();
            alert("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
            setUsername("");
            setPassword("");
            setRole("user");
            setGroup("");

            onUserCreated(data.user); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        } catch (error) {
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
    };

    // // üìå –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    // const handleAddGroup = async () => {
    //     if (!newGroup.trim()) {
    //         alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã!");
    //         return;
    //     }
    //
    //     try {
    //         const token = localStorage.getItem("token");
    //         const response = await fetch("http://localhost:5000/admin-tools/groups", {
    //             method: "POST",
    //             headers: {
    //                 "Content-Type": "application/json",
    //                 Authorization: `Bearer ${token}`,
    //             },
    //             body: JSON.stringify({ newGroup }),
    //         });
    //
    //         if (!response.ok) {
    //             const errorText = await response.text();
    //             throw new Error(errorText);
    //         }
    //
    //         setGroups([...groups, newGroup]); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫
    //         setNewGroup("");
    //         alert("–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    //     } catch (error) {
    //         alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    //     }
    // };

    return (
        <div>
            <h2>–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
            <form onSubmit={handleCreateUser}>
                <div>
                    <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
                    <input
                        type="text"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        required
                    />
                </div>
                <div>
                    <label>–ü–∞—Ä–æ–ª—å:</label>
                    <input
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                    />
                </div>
                <div>
                    <label>–†–æ–ª—å:</label>
                    <select value={role} onChange={(e) => setRole(e.target.value)}>
                        <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                        <option value="student">–°—Ç—É–¥–µ–Ω—Ç</option>
                        <option value="teacher">–£—á–∏—Ç–µ–ª—å</option>
                        <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                    </select>
                </div>
                <div>
                    <label>–ì—Ä—É–ø–ø–∞:</label>
                    <select value={group} onChange={(e) => setGroup(e.target.value)} required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É</option>
                        {groups.map((g) => (
                            <option key={g} value={g}>
                                {g}
                            </option>
                        ))}
                    </select>
                </div>
                <button type="submit">–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
            </form>

            {/*<h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É</h3>*/}
            {/*<div>*/}
            {/*    <input*/}
            {/*        type="text"*/}
            {/*        value={newGroup}*/}
            {/*        onChange={(e) => setNewGroup(e.target.value)}*/}
            {/*        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"*/}
            {/*    />*/}
            {/*    <button onClick={handleAddGroup}>–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É</button>*/}
            {/*</div>*/}
        </div>
    );
};

export default CreateUserForm;
